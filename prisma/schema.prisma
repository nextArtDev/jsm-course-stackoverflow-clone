// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  url String @db.String
  key String @db.String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name             String
  // username         String?
  phone            String    @unique
  password         String
  bio              String?   @db.String
  picture          String?   @db.String
  location         String?   @db.String
  portfolioWebsite String?   @db.String
  reputation       Int       @default(0)
  // role             Role      @default(USER)
  isVerified       Boolean   @default(false)
  verificationCode Int?
  verificationDate DateTime?

  saved Question[] @relation(fields: [savedQuestions], references: [id])
  // savedQuestionId String     @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Answer Answer[]
  // Tag         Tag[]
  // Interaction Interaction[]

  upvoteQuestions   Question[] @relation(fields: [QuestionUpvotes], references: [id])
  downvoteQuestions Question[] @relation(fields: [QuestionDownvotes], references: [id])
  questions         Question[] @relation(fields: [questionAuthor], references: [id])

  upvoteAnswers   Answer[] @relation(fields: [AnswerUpvotes], references: [id])
  downvoteAnswers Answer[] @relation(fields: [AnswerDownvotes], references: [id])
  answers         Answer[] @relation(fields: [answerAuthor], references: [id])
}

model Question {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  title   String
  content String @db.String
  views   Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  upvotes User[] @relation(fields: [upvoteQuestions], references: [id])
  // upvoteUserId String @db.ObjectId

  downvotes User[] @relation(fields: [downvoteQuestions], references: [id])
  // downvoteUserId String @db.ObjectId

  QuestionAuthor User? @relation(fields: [questions], references: [id])
  // userId         String? @db.ObjectId

  User User? @relation(fields: [savedQuestions], references: [id])

  answers Answer[]

  // tags Tag[]
  // Interaction Interaction[]
}

model Answer {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  content String @db.String

  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId

  upvotes        User[] @relation(fields: [AnswerUpvotes], references: [id], fields: [upvoteUserId])
  downvotes      User[] @relation(fields: [AnswerDownvotes], references: [id], fields: [downvoteUserId])
  upvoteUserId   String @db.ObjectId
  downvoteUserId String @db.ObjectId

  AnswerAuthor   User?   @relation(fields: [answerAuthor], references: [id], fields: [answerAuthorId])
  answerAuthorId String? @db.ObjectId

  // Interaction Interaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

// model Tag {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   name        String @db.String
//   description String @db.String

//   questions Question[]

//   followers User[]

//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt

//   Interaction   Interaction? @relation(fields: [interactionId], references: [id])
//   interactionId String?      @db.ObjectId
// }

// model Interaction {
//   id String @id @default(auto()) @map("_id") @db.ObjectId

//   InteractionUser User? @relation("interactionUser", references: [id], fields: [userId])

//   action String

//   question Question @relation(fields: [questionId], references: [id])
//   answer   Answer   @relation(fields: [answerId], references: [id])
//   tags     Tag[]

//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
//   userId     String?  @db.ObjectId
//   questionId String   @db.ObjectId
//   answerId   String   @db.ObjectId
//   User       User?    @relation(fields: [userId], references: [id])
// }
